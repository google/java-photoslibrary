/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'
apply plugin: 'java-library-distribution'
apply plugin: 'maven-publish'
apply plugin: 'signing'


description = 'Google Photos Library API Client Library for Java'
group = 'com.google.photos.library'
version = '1.7.3'

repositories {
    mavenCentral()
    mavenLocal()
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.named('sourcesJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    options.with {
        encoding = 'UTF-8'
    }
}

javadoc.options.encoding = 'UTF-8'

dependencies {
    api 'com.google.api:gax-grpc:2.23.3'
    implementation 'com.google.api.grpc:proto-google-common-protos:2.14.2'
    implementation 'com.google.api:api-common:2.6.2'
    implementation 'com.google.api:gax:2.23.3'
    implementation 'com.google.protobuf:protobuf-java:3.21.10'
    implementation 'io.grpc:grpc-core:1.53.0'
    implementation 'io.grpc:grpc-protobuf:1.53.0'
    implementation 'io.grpc:grpc-stub:1.53.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
   
    // TODO: remove when dropping Java 8 support.
    // https://github.com/googleapis/gapic-generator-java/issues/888
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation 'com.google.api:gax-grpc:2.23.3:testlib'
    testImplementation 'com.google.api:gax:2.23.3:testlib'
    testImplementation 'io.grpc:grpc-netty-shaded:1.53.0'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.mockito:mockito-inline:3.12.4'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
}

task smokeTest(type: Test) {
    filter {
        includeTestsMatching "*SmokeTest"
        setFailOnNoMatchingTests false
    }
}

test {
    exclude "**/*SmokeTest*"
}

tasks.named('test', Test) {
    jvmArgs(
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
        '--add-opens', 'java.base/java.net=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    )
}

spotless {
    enforceCheck = true
    java {
        googleJavaFormat()

        // don't fail on format of files generated by Protobuf
        targetExclude('**/com/google/photos/library/v1/proto/*.java', '**/com/google/photos/types/proto/*.java')
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

clean {
    delete 'all-jars'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': 'com.google.photos.library.client')
    }
}

task allJars(type: Copy) {
    dependsOn test, jar
    into 'all-jars'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    // Replace with `configurations.testRuntimeClasspath` to include test dependencies
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } with jar
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'google-photos-library-client'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "Google Photos Library API CLient Library for Java"
                description = project.description
                url = 'http://developers.google.com/photos'
                scm {
                    url = 'https://github.com/google/java-photoslibrary'
                    connection = 'scm:git:https://github.com/google/java-photoslibrary.git'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jfschmakeit'
                        name = 'Jan-Felix Schmakeit'
                        organization = "Google LLC"
                        organizationUrl = "http://www.google.com/"
                    }
                }
                organization {
                    name = "Google LLC"
                    url = "http://www.google.com/"
                }
            }
        }
    }
    repositories {
        maven {
            name = "buildDir"
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
        maven {
            name = "sonatype"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

signing {
    sign publishing.publications
}
